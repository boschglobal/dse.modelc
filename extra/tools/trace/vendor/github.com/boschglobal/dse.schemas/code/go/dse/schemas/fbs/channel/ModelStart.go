// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package channel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// ModelStart: Indicate that a Model is ready to start its next execution step.
/// (SimBus -> Model)
type ModelStart struct {
	_tab flatbuffers.Table
}

func GetRootAsModelStart(buf []byte, offset flatbuffers.UOffsetT) *ModelStart {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ModelStart{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsModelStart(buf []byte, offset flatbuffers.UOffsetT) *ModelStart {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ModelStart{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ModelStart) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ModelStart) Table() flatbuffers.Table {
	return rcv._tab
}

/// The Model Time from where the Model should start its execution step.
func (rcv *ModelStart) ModelTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Model Time from where the Model should start its execution step.
func (rcv *ModelStart) MutateModelTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// The expected (or anticipated) Stop Time for this Execution step. A Model
/// may during its execution decide to return earlier than this time.
func (rcv *ModelStart) StopTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The expected (or anticipated) Stop Time for this Execution step. A Model
/// may during its execution decide to return earlier than this time.
func (rcv *ModelStart) MutateStopTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// A nested SignalValue message. The Model should apply the contained
/// values before beginning its execution step.
func (rcv *ModelStart) SignalValue(obj *SignalValue) *SignalValue {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SignalValue)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// A nested SignalValue message. The Model should apply the contained
/// values before beginning its execution step.
func ModelStartStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ModelStartAddModelTime(builder *flatbuffers.Builder, modelTime float64) {
	builder.PrependFloat64Slot(0, modelTime, 0.0)
}
func ModelStartAddStopTime(builder *flatbuffers.Builder, stopTime float64) {
	builder.PrependFloat64Slot(1, stopTime, 0.0)
}
func ModelStartAddSignalValue(builder *flatbuffers.Builder, signalValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(signalValue), 0)
}
func ModelStartEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
