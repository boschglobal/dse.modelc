// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package notify

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SignalVector struct {
	_tab flatbuffers.Table
}

func GetRootAsSignalVector(buf []byte, offset flatbuffers.UOffsetT) *SignalVector {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SignalVector{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSignalVector(buf []byte, offset flatbuffers.UOffsetT) *SignalVector {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SignalVector{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SignalVector) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SignalVector) Table() flatbuffers.Table {
	return rcv._tab
}

/// The name of the Signal Vector / Channel.
func (rcv *SignalVector) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the Signal Vector / Channel.
/// UID of the Model related to this Signal Vector (optional).
func (rcv *SignalVector) ModelUid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// UID of the Model related to this Signal Vector (optional).
func (rcv *SignalVector) MutateModelUid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// MsgPack encoded Signal Data.
func (rcv *SignalVector) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *SignalVector) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SignalVector) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// MsgPack encoded Signal Data.
func (rcv *SignalVector) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

/// Vector encoded Signals (scalar).
func (rcv *SignalVector) Signal(obj *Signal, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 16
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SignalVector) SignalLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Vector encoded Signals (scalar).
func SignalVectorStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SignalVectorAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func SignalVectorAddModelUid(builder *flatbuffers.Builder, modelUid uint32) {
	builder.PrependUint32Slot(1, modelUid, 0)
}
func SignalVectorAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(data), 0)
}
func SignalVectorStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func SignalVectorAddSignal(builder *flatbuffers.Builder, signal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(signal), 0)
}
func SignalVectorStartSignalVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(16, numElems, 8)
}
func SignalVectorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
