// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package channel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// The Channel Message container.
type ChannelMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsChannelMessage(buf []byte, offset flatbuffers.UOffsetT) *ChannelMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ChannelMessage{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsChannelMessage(buf []byte, offset flatbuffers.UOffsetT) *ChannelMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ChannelMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ChannelMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ChannelMessage) Table() flatbuffers.Table {
	return rcv._tab
}

/// Model UID of the Model sending or receiving this message. The Model UID
/// is unique to a Simulation.
func (rcv *ChannelMessage) ModelUid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Model UID of the Model sending or receiving this message. The Model UID
/// is unique to a Simulation.
func (rcv *ChannelMessage) MutateModelUid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ChannelMessage) MessageType() MessageType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return MessageType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ChannelMessage) MutateMessageType(n MessageType) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

/// The message being sent by this Channel Message.
func (rcv *ChannelMessage) Message(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

/// The message being sent by this Channel Message.
/// Client supplied token which will request a Message ACK (i.e. an empty
/// Channel Message with the same token value).
func (rcv *ChannelMessage) Token() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Client supplied token which will request a Message ACK (i.e. an empty
/// Channel Message with the same token value).
func (rcv *ChannelMessage) MutateToken(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Indicate a return code for a Message Processing. Only set in case of error.
func (rcv *ChannelMessage) Rc() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Indicate a return code for a Message Processing. Only set in case of error.
func (rcv *ChannelMessage) MutateRc(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// A message related to an `rc` value indicating an error.
func (rcv *ChannelMessage) Response() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A message related to an `rc` value indicating an error.
/// This message is PART OF X messages which are being sent a Model at a
/// particular time instance. The Model receiving this message should wait
/// for all related messages before beginning message processing.
/// The value indicates the number of message to collect (the default
/// value of 0 infers a value of 1).
func (rcv *ChannelMessage) PartOf() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// This message is PART OF X messages which are being sent a Model at a
/// particular time instance. The Model receiving this message should wait
/// for all related messages before beginning message processing.
/// The value indicates the number of message to collect (the default
/// value of 0 infers a value of 1).
func (rcv *ChannelMessage) MutatePartOf(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Channel Name this message is sent on (informational only).
func (rcv *ChannelMessage) ChannelName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Channel Name this message is sent on (informational only).
func ChannelMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func ChannelMessageAddModelUid(builder *flatbuffers.Builder, modelUid uint32) {
	builder.PrependUint32Slot(0, modelUid, 0)
}
func ChannelMessageAddMessageType(builder *flatbuffers.Builder, messageType MessageType) {
	builder.PrependByteSlot(1, byte(messageType), 0)
}
func ChannelMessageAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(message), 0)
}
func ChannelMessageAddToken(builder *flatbuffers.Builder, token int32) {
	builder.PrependInt32Slot(3, token, 0)
}
func ChannelMessageAddRc(builder *flatbuffers.Builder, rc int32) {
	builder.PrependInt32Slot(4, rc, 0)
}
func ChannelMessageAddResponse(builder *flatbuffers.Builder, response flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(response), 0)
}
func ChannelMessageAddPartOf(builder *flatbuffers.Builder, partOf int32) {
	builder.PrependInt32Slot(6, partOf, 0)
}
func ChannelMessageAddChannelName(builder *flatbuffers.Builder, channelName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(channelName), 0)
}
func ChannelMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
