// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package channel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// ModelReady: Indicate that a Model is ready to start its next execution step.
/// (Model -> SimBus)
type ModelReady struct {
	_tab flatbuffers.Table
}

func GetRootAsModelReady(buf []byte, offset flatbuffers.UOffsetT) *ModelReady {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ModelReady{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsModelReady(buf []byte, offset flatbuffers.UOffsetT) *ModelReady {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ModelReady{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ModelReady) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ModelReady) Table() flatbuffers.Table {
	return rcv._tab
}

/// The Model Time that the Model expects to start its next execution step.
func (rcv *ModelReady) ModelTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Model Time that the Model expects to start its next execution step.
func (rcv *ModelReady) MutateModelTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// A nested SignalWrite message containing Signal Values changed during the
/// prior execution step. They Signal Values will be distributed to other
/// Models in the Simulation by the Simulation Bus.
func (rcv *ModelReady) SignalWrite(obj *SignalWrite) *SignalWrite {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SignalWrite)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// A nested SignalWrite message containing Signal Values changed during the
/// prior execution step. They Signal Values will be distributed to other
/// Models in the Simulation by the Simulation Bus.
func ModelReadyStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ModelReadyAddModelTime(builder *flatbuffers.Builder, modelTime float64) {
	builder.PrependFloat64Slot(0, modelTime, 0.0)
}
func ModelReadyAddSignalWrite(builder *flatbuffers.Builder, signalWrite flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(signalWrite), 0)
}
func ModelReadyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
