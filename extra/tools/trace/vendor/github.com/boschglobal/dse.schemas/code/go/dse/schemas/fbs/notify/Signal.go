// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package notify

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Signal struct {
	_tab flatbuffers.Struct
}

func (rcv *Signal) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Signal) Table() flatbuffers.Table {
	return rcv._tab.Table
}

/// Signal UID.
func (rcv *Signal) Uid() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
/// Signal UID.
func (rcv *Signal) MutateUid(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

/// Signal Value (scalar).
func (rcv *Signal) Value() float64 {
	return rcv._tab.GetFloat64(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
/// Signal Value (scalar).
func (rcv *Signal) MutateValue(n float64) bool {
	return rcv._tab.MutateFloat64(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func CreateSignal(builder *flatbuffers.Builder, uid uint32, value float64) flatbuffers.UOffsetT {
	builder.Prep(8, 16)
	builder.PrependFloat64(value)
	builder.Pad(4)
	builder.PrependUint32(uid)
	return builder.Offset()
}
