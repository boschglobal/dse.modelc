// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FlexRay

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Frame struct {
	_tab flatbuffers.Table
}

func GetRootAsFrame(buf []byte, offset flatbuffers.UOffsetT) *Frame {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Frame{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFrame(buf []byte, offset flatbuffers.UOffsetT) *Frame {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Frame{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Frame) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Frame) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Frame) FrameId() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *Frame) MutateFrameId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *Frame) Indicators() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 12
}

func (rcv *Frame) MutateIndicators(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *Frame) Length() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *Frame) MutateLength(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *Frame) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Frame) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Frame) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Frame) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func FrameStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func FrameAddFrameId(builder *flatbuffers.Builder, frameId uint16) {
	builder.PrependUint16Slot(0, frameId, 1)
}
func FrameAddIndicators(builder *flatbuffers.Builder, indicators byte) {
	builder.PrependByteSlot(1, indicators, 12)
}
func FrameAddLength(builder *flatbuffers.Builder, length byte) {
	builder.PrependByteSlot(2, length, 1)
}
func FrameAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(data), 0)
}
func FrameStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func FrameEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
