// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FlexRay

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageTiming struct {
	_tab flatbuffers.Struct
}

func (rcv *MessageTiming) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageTiming) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *MessageTiming) SendRequest(obj *TimeSpec) *TimeSpec {
	if obj == nil {
		obj = new(TimeSpec)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+0)
	return obj
}
func (rcv *MessageTiming) Arbitration(obj *TimeSpec) *TimeSpec {
	if obj == nil {
		obj = new(TimeSpec)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+8)
	return obj
}
func (rcv *MessageTiming) Reception(obj *TimeSpec) *TimeSpec {
	if obj == nil {
		obj = new(TimeSpec)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+16)
	return obj
}

func CreateMessageTiming(builder *flatbuffers.Builder, send_request_psec10 int64, arbitration_psec10 int64, reception_psec10 int64) flatbuffers.UOffsetT {
	builder.Prep(8, 24)
	builder.Prep(8, 8)
	builder.PrependInt64(reception_psec10)
	builder.Prep(8, 8)
	builder.PrependInt64(arbitration_psec10)
	builder.Prep(8, 8)
	builder.PrependInt64(send_request_psec10)
	return builder.Offset()
}
