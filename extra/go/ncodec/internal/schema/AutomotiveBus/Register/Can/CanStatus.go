// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Can

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CanStatus struct {
	_tab flatbuffers.Table
}

func GetRootAsCanStatus(buf []byte, offset flatbuffers.UOffsetT) *CanStatus {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CanStatus{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCanStatus(buf []byte, offset flatbuffers.UOffsetT) *CanStatus {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CanStatus{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CanStatus) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CanStatus) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CanStatus) Sync() BusState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return BusState(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

func (rcv *CanStatus) MutateSync(n BusState) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func CanStatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func CanStatusAddSync(builder *flatbuffers.Builder, sync BusState) {
	builder.PrependInt8Slot(0, int8(sync), 1)
}
func CanStatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
