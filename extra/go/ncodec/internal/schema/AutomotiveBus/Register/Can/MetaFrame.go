// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Can

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MetaFrame struct {
	_tab flatbuffers.Table
}

func GetRootAsMetaFrame(buf []byte, offset flatbuffers.UOffsetT) *MetaFrame {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MetaFrame{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMetaFrame(buf []byte, offset flatbuffers.UOffsetT) *MetaFrame {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MetaFrame{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MetaFrame) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MetaFrame) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MetaFrame) Status() BufferStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return BufferStatus(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MetaFrame) MutateStatus(n BufferStatus) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *MetaFrame) Direction() BufferDirection {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return BufferDirection(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MetaFrame) MutateDirection(n BufferDirection) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *MetaFrame) CanFdEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MetaFrame) MutateCanFdEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *MetaFrame) Frame(obj *Frame) *Frame {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Frame)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MetaFrame) Timing(obj *MessageTiming) *MessageTiming {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(MessageTiming)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MetaFrameStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MetaFrameAddStatus(builder *flatbuffers.Builder, status BufferStatus) {
	builder.PrependInt8Slot(0, int8(status), 0)
}
func MetaFrameAddDirection(builder *flatbuffers.Builder, direction BufferDirection) {
	builder.PrependInt8Slot(1, int8(direction), 0)
}
func MetaFrameAddCanFdEnabled(builder *flatbuffers.Builder, canFdEnabled bool) {
	builder.PrependBoolSlot(2, canFdEnabled, false)
}
func MetaFrameAddFrame(builder *flatbuffers.Builder, frame flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(frame), 0)
}
func MetaFrameAddTiming(builder *flatbuffers.Builder, timing flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(timing), 0)
}
func MetaFrameEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
