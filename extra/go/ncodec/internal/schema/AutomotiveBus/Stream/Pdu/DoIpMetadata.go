// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Pdu

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DoIpMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsDoIpMetadata(buf []byte, offset flatbuffers.UOffsetT) *DoIpMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DoIpMetadata{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDoIpMetadata(buf []byte, offset flatbuffers.UOffsetT) *DoIpMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DoIpMetadata{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DoIpMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DoIpMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

// / DoIP: Protocol Version.
func (rcv *DoIpMetadata) ProtocolVersion() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

// / DoIP: Protocol Version.
func (rcv *DoIpMetadata) MutateProtocolVersion(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

// / DoIP: Payload Type.
func (rcv *DoIpMetadata) PayloadType() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

// / DoIP: Payload Type.
func (rcv *DoIpMetadata) MutatePayloadType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func DoIpMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DoIpMetadataAddProtocolVersion(builder *flatbuffers.Builder, protocolVersion byte) {
	builder.PrependByteSlot(0, protocolVersion, 0)
}
func DoIpMetadataAddPayloadType(builder *flatbuffers.Builder, payloadType uint16) {
	builder.PrependUint16Slot(1, payloadType, 0)
}
func DoIpMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
