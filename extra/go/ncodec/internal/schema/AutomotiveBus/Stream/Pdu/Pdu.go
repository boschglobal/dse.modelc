// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Pdu

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Pdu struct {
	_tab flatbuffers.Table
}

func GetRootAsPdu(buf []byte, offset flatbuffers.UOffsetT) *Pdu {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Pdu{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPdu(buf []byte, offset flatbuffers.UOffsetT) *Pdu {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Pdu{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Pdu) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Pdu) Table() flatbuffers.Table {
	return rcv._tab
}

// / PDU: Identifier.
func (rcv *Pdu) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

// / PDU: Identifier.
func (rcv *Pdu) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

// / PDU: Payload (DLC is vector length).
func (rcv *Pdu) Payload(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Pdu) PayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Pdu) PayloadBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

// / PDU: Payload (DLC is vector length).
func (rcv *Pdu) MutatePayload(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Pdu) TransportType() TransportMetadata {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return TransportMetadata(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Pdu) MutateTransportType(n TransportMetadata) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

// / PDU: Transport metadata relating to this PDU (optional).
func (rcv *Pdu) Transport(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

// / PDU: Transport metadata relating to this PDU (optional).
// / Identifier: SWC ID of _originating_ this PDU.
func (rcv *Pdu) SwcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

// / Identifier: SWC ID of _originating_ this PDU.
func (rcv *Pdu) MutateSwcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

// / Identifier: ECU ID of ECU _originating_ this PDU.
func (rcv *Pdu) EcuId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

// / Identifier: ECU ID of ECU _originating_ this PDU.
func (rcv *Pdu) MutateEcuId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func PduStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func PduAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func PduAddPayload(builder *flatbuffers.Builder, payload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(payload), 0)
}
func PduStartPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PduAddTransportType(builder *flatbuffers.Builder, transportType TransportMetadata) {
	builder.PrependByteSlot(2, byte(transportType), 0)
}
func PduAddTransport(builder *flatbuffers.Builder, transport flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(transport), 0)
}
func PduAddSwcId(builder *flatbuffers.Builder, swcId uint32) {
	builder.PrependUint32Slot(4, swcId, 0)
}
func PduAddEcuId(builder *flatbuffers.Builder, ecuId uint32) {
	builder.PrependUint32Slot(5, ecuId, 0)
}
func PduEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
