// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Pdu

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IpAddressV6 struct {
	_tab flatbuffers.Struct
}

func (rcv *IpAddressV6) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IpAddressV6) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *IpAddressV6) V0() uint16 {
	return rcv._tab.GetUint16(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *IpAddressV6) MutateV0(n uint16) bool {
	return rcv._tab.MutateUint16(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *IpAddressV6) V1() uint16 {
	return rcv._tab.GetUint16(rcv._tab.Pos + flatbuffers.UOffsetT(2))
}
func (rcv *IpAddressV6) MutateV1(n uint16) bool {
	return rcv._tab.MutateUint16(rcv._tab.Pos+flatbuffers.UOffsetT(2), n)
}

func (rcv *IpAddressV6) V2() uint16 {
	return rcv._tab.GetUint16(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *IpAddressV6) MutateV2(n uint16) bool {
	return rcv._tab.MutateUint16(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *IpAddressV6) V3() uint16 {
	return rcv._tab.GetUint16(rcv._tab.Pos + flatbuffers.UOffsetT(6))
}
func (rcv *IpAddressV6) MutateV3(n uint16) bool {
	return rcv._tab.MutateUint16(rcv._tab.Pos+flatbuffers.UOffsetT(6), n)
}

func (rcv *IpAddressV6) V4() uint16 {
	return rcv._tab.GetUint16(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *IpAddressV6) MutateV4(n uint16) bool {
	return rcv._tab.MutateUint16(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *IpAddressV6) V5() uint16 {
	return rcv._tab.GetUint16(rcv._tab.Pos + flatbuffers.UOffsetT(10))
}
func (rcv *IpAddressV6) MutateV5(n uint16) bool {
	return rcv._tab.MutateUint16(rcv._tab.Pos+flatbuffers.UOffsetT(10), n)
}

func (rcv *IpAddressV6) V6() uint16 {
	return rcv._tab.GetUint16(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *IpAddressV6) MutateV6(n uint16) bool {
	return rcv._tab.MutateUint16(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func (rcv *IpAddressV6) V7() uint16 {
	return rcv._tab.GetUint16(rcv._tab.Pos + flatbuffers.UOffsetT(14))
}
func (rcv *IpAddressV6) MutateV7(n uint16) bool {
	return rcv._tab.MutateUint16(rcv._tab.Pos+flatbuffers.UOffsetT(14), n)
}

func CreateIpAddressV6(builder *flatbuffers.Builder, v0 uint16, v1 uint16, v2 uint16, v3 uint16, v4 uint16, v5 uint16, v6 uint16, v7 uint16) flatbuffers.UOffsetT {
	builder.Prep(2, 16)
	builder.PrependUint16(v7)
	builder.PrependUint16(v6)
	builder.PrependUint16(v5)
	builder.PrependUint16(v4)
	builder.PrependUint16(v3)
	builder.PrependUint16(v2)
	builder.PrependUint16(v1)
	builder.PrependUint16(v0)
	return builder.Offset()
}
