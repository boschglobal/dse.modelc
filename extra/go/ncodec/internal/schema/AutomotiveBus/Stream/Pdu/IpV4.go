// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Pdu

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IpV4 struct {
	_tab flatbuffers.Table
}

func GetRootAsIpV4(buf []byte, offset flatbuffers.UOffsetT) *IpV4 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IpV4{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsIpV4(buf []byte, offset flatbuffers.UOffsetT) *IpV4 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IpV4{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *IpV4) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IpV4) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *IpV4) SrcAddr() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *IpV4) MutateSrcAddr(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *IpV4) DstAddr() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *IpV4) MutateDstAddr(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func IpV4Start(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func IpV4AddSrcAddr(builder *flatbuffers.Builder, srcAddr uint32) {
	builder.PrependUint32Slot(0, srcAddr, 0)
}
func IpV4AddDstAddr(builder *flatbuffers.Builder, dstAddr uint32) {
	builder.PrependUint32Slot(1, dstAddr, 0)
}
func IpV4End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
