// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Pdu

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IpMessageMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsIpMessageMetadata(buf []byte, offset flatbuffers.UOffsetT) *IpMessageMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IpMessageMetadata{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsIpMessageMetadata(buf []byte, offset flatbuffers.UOffsetT) *IpMessageMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IpMessageMetadata{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *IpMessageMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IpMessageMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

// / Ethernet: Destination MAC (stored in lower 48-bits, transmission order).
// /  example: uint64 := XX-XX-01-23-45-67-89-AB
func (rcv *IpMessageMetadata) EthDstMac() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

// / Ethernet: Destination MAC (stored in lower 48-bits, transmission order).
// /  example: uint64 := XX-XX-01-23-45-67-89-AB
func (rcv *IpMessageMetadata) MutateEthDstMac(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

// / Ethernet: Source MAC (stored in lower 48-bits, transmission order).
// /  example: uint64 := XX-XX-01-23-45-67-89-AB
func (rcv *IpMessageMetadata) EthSrcMac() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

// / Ethernet: Source MAC (stored in lower 48-bits, transmission order).
// /  example: uint64 := XX-XX-01-23-45-67-89-AB
func (rcv *IpMessageMetadata) MutateEthSrcMac(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

// / Ethernet: EtherType.
func (rcv *IpMessageMetadata) EthEthertype() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

// / Ethernet: EtherType.
func (rcv *IpMessageMetadata) MutateEthEthertype(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

// / Ethernet: TCI: Priority code point.
func (rcv *IpMessageMetadata) EthTciPcp() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

// / Ethernet: TCI: Priority code point.
func (rcv *IpMessageMetadata) MutateEthTciPcp(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

// / Ethernet: TCI: Drop eligible indicator.
func (rcv *IpMessageMetadata) EthTciDei() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

// / Ethernet: TCI: Drop eligible indicator.
func (rcv *IpMessageMetadata) MutateEthTciDei(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

// / Ethernet: TCI: VLAN identifier.
func (rcv *IpMessageMetadata) EthTciVid() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

// / Ethernet: TCI: VLAN identifier.
func (rcv *IpMessageMetadata) MutateEthTciVid(n uint16) bool {
	return rcv._tab.MutateUint16Slot(14, n)
}

func (rcv *IpMessageMetadata) IpAddrType() IpAddr {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return IpAddr(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *IpMessageMetadata) MutateIpAddrType(n IpAddr) bool {
	return rcv._tab.MutateByteSlot(16, byte(n))
}

// / IP: Address.
func (rcv *IpMessageMetadata) IpAddr(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

// / IP: Address.
// / IP: Protocol Specifier.
func (rcv *IpMessageMetadata) IpProtocol() IpProtocol {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return IpProtocol(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

// / IP: Protocol Specifier.
func (rcv *IpMessageMetadata) MutateIpProtocol(n IpProtocol) bool {
	return rcv._tab.MutateByteSlot(20, byte(n))
}

// / IP: TCP/UDP Source Port.
func (rcv *IpMessageMetadata) IpSrcPort() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

// / IP: TCP/UDP Source Port.
func (rcv *IpMessageMetadata) MutateIpSrcPort(n uint16) bool {
	return rcv._tab.MutateUint16Slot(22, n)
}

// / IP: TCP/UDP Destination Port.
func (rcv *IpMessageMetadata) IpDstPort() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

// / IP: TCP/UDP Destination Port.
func (rcv *IpMessageMetadata) MutateIpDstPort(n uint16) bool {
	return rcv._tab.MutateUint16Slot(24, n)
}

func (rcv *IpMessageMetadata) AdapterType() SocketAdapter {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return SocketAdapter(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *IpMessageMetadata) MutateAdapterType(n SocketAdapter) bool {
	return rcv._tab.MutateByteSlot(26, byte(n))
}

func (rcv *IpMessageMetadata) Adapter(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func IpMessageMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func IpMessageMetadataAddEthDstMac(builder *flatbuffers.Builder, ethDstMac uint64) {
	builder.PrependUint64Slot(0, ethDstMac, 0)
}
func IpMessageMetadataAddEthSrcMac(builder *flatbuffers.Builder, ethSrcMac uint64) {
	builder.PrependUint64Slot(1, ethSrcMac, 0)
}
func IpMessageMetadataAddEthEthertype(builder *flatbuffers.Builder, ethEthertype uint16) {
	builder.PrependUint16Slot(2, ethEthertype, 0)
}
func IpMessageMetadataAddEthTciPcp(builder *flatbuffers.Builder, ethTciPcp byte) {
	builder.PrependByteSlot(3, ethTciPcp, 0)
}
func IpMessageMetadataAddEthTciDei(builder *flatbuffers.Builder, ethTciDei byte) {
	builder.PrependByteSlot(4, ethTciDei, 0)
}
func IpMessageMetadataAddEthTciVid(builder *flatbuffers.Builder, ethTciVid uint16) {
	builder.PrependUint16Slot(5, ethTciVid, 0)
}
func IpMessageMetadataAddIpAddrType(builder *flatbuffers.Builder, ipAddrType IpAddr) {
	builder.PrependByteSlot(6, byte(ipAddrType), 0)
}
func IpMessageMetadataAddIpAddr(builder *flatbuffers.Builder, ipAddr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(ipAddr), 0)
}
func IpMessageMetadataAddIpProtocol(builder *flatbuffers.Builder, ipProtocol IpProtocol) {
	builder.PrependByteSlot(8, byte(ipProtocol), 0)
}
func IpMessageMetadataAddIpSrcPort(builder *flatbuffers.Builder, ipSrcPort uint16) {
	builder.PrependUint16Slot(9, ipSrcPort, 0)
}
func IpMessageMetadataAddIpDstPort(builder *flatbuffers.Builder, ipDstPort uint16) {
	builder.PrependUint16Slot(10, ipDstPort, 0)
}
func IpMessageMetadataAddAdapterType(builder *flatbuffers.Builder, adapterType SocketAdapter) {
	builder.PrependByteSlot(11, byte(adapterType), 0)
}
func IpMessageMetadataAddAdapter(builder *flatbuffers.Builder, adapter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(adapter), 0)
}
func IpMessageMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
