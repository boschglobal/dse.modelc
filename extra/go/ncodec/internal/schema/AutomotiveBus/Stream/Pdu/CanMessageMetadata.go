// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Pdu

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CanMessageMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsCanMessageMetadata(buf []byte, offset flatbuffers.UOffsetT) *CanMessageMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CanMessageMetadata{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCanMessageMetadata(buf []byte, offset flatbuffers.UOffsetT) *CanMessageMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CanMessageMetadata{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CanMessageMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CanMessageMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

// / CAN: Message Format.
func (rcv *CanMessageMetadata) MessageFormat() CanMessageFormat {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CanMessageFormat(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

// / CAN: Message Format.
func (rcv *CanMessageMetadata) MutateMessageFormat(n CanMessageFormat) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

// / CAN: Frame Type.
func (rcv *CanMessageMetadata) FrameType() CanFrameType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return CanFrameType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

// / CAN: Frame Type.
func (rcv *CanMessageMetadata) MutateFrameType(n CanFrameType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

// / CAN: Interface ID of the Interface _sending_ this PDU.
func (rcv *CanMessageMetadata) InterfaceId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

// / CAN: Interface ID of the Interface _sending_ this PDU.
func (rcv *CanMessageMetadata) MutateInterfaceId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

// / CAN: Network ID of the network that _carries_ this PDU.
func (rcv *CanMessageMetadata) NetworkId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

// / CAN: Network ID of the network that _carries_ this PDU.
func (rcv *CanMessageMetadata) MutateNetworkId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func CanMessageMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CanMessageMetadataAddMessageFormat(builder *flatbuffers.Builder, messageFormat CanMessageFormat) {
	builder.PrependInt8Slot(0, int8(messageFormat), 0)
}
func CanMessageMetadataAddFrameType(builder *flatbuffers.Builder, frameType CanFrameType) {
	builder.PrependInt8Slot(1, int8(frameType), 0)
}
func CanMessageMetadataAddInterfaceId(builder *flatbuffers.Builder, interfaceId uint32) {
	builder.PrependUint32Slot(2, interfaceId, 0)
}
func CanMessageMetadataAddNetworkId(builder *flatbuffers.Builder, networkId uint32) {
	builder.PrependUint32Slot(3, networkId, 0)
}
func CanMessageMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
