// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Pdu

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SomeIpMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsSomeIpMetadata(buf []byte, offset flatbuffers.UOffsetT) *SomeIpMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SomeIpMetadata{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSomeIpMetadata(buf []byte, offset flatbuffers.UOffsetT) *SomeIpMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SomeIpMetadata{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SomeIpMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SomeIpMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

// / SOME/IP: Message ID.
func (rcv *SomeIpMetadata) MessageId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

// / SOME/IP: Message ID.
func (rcv *SomeIpMetadata) MutateMessageId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

// / SOME/IP: Message Length.
func (rcv *SomeIpMetadata) Length() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

// / SOME/IP: Message Length.
func (rcv *SomeIpMetadata) MutateLength(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

// / SOME/IP: Request ID.
func (rcv *SomeIpMetadata) RequestId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

// / SOME/IP: Request ID.
func (rcv *SomeIpMetadata) MutateRequestId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

// / SOME/IP: Protocol Version.
func (rcv *SomeIpMetadata) ProtocolVersion() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

// / SOME/IP: Protocol Version.
func (rcv *SomeIpMetadata) MutateProtocolVersion(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

// / SOME/IP: Interface Version.
func (rcv *SomeIpMetadata) InterfaceVersion() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

// / SOME/IP: Interface Version.
func (rcv *SomeIpMetadata) MutateInterfaceVersion(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

// / SOME/IP: Message Type.
func (rcv *SomeIpMetadata) MessageType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

// / SOME/IP: Message Type.
func (rcv *SomeIpMetadata) MutateMessageType(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

// / SOME/IP: Return code.
func (rcv *SomeIpMetadata) ReturnCode() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

// / SOME/IP: Return code.
func (rcv *SomeIpMetadata) MutateReturnCode(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

func SomeIpMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func SomeIpMetadataAddMessageId(builder *flatbuffers.Builder, messageId uint32) {
	builder.PrependUint32Slot(0, messageId, 0)
}
func SomeIpMetadataAddLength(builder *flatbuffers.Builder, length uint32) {
	builder.PrependUint32Slot(1, length, 0)
}
func SomeIpMetadataAddRequestId(builder *flatbuffers.Builder, requestId uint32) {
	builder.PrependUint32Slot(2, requestId, 0)
}
func SomeIpMetadataAddProtocolVersion(builder *flatbuffers.Builder, protocolVersion byte) {
	builder.PrependByteSlot(3, protocolVersion, 0)
}
func SomeIpMetadataAddInterfaceVersion(builder *flatbuffers.Builder, interfaceVersion byte) {
	builder.PrependByteSlot(4, interfaceVersion, 0)
}
func SomeIpMetadataAddMessageType(builder *flatbuffers.Builder, messageType byte) {
	builder.PrependByteSlot(5, messageType, 0)
}
func SomeIpMetadataAddReturnCode(builder *flatbuffers.Builder, returnCode byte) {
	builder.PrependByteSlot(6, returnCode, 0)
}
func SomeIpMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
