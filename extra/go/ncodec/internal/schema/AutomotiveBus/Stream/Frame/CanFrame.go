// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Frame

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CanFrame struct {
	_tab flatbuffers.Table
}

func GetRootAsCanFrame(buf []byte, offset flatbuffers.UOffsetT) *CanFrame {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CanFrame{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCanFrame(buf []byte, offset flatbuffers.UOffsetT) *CanFrame {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CanFrame{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CanFrame) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CanFrame) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CanFrame) FrameId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CanFrame) MutateFrameId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *CanFrame) Payload(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *CanFrame) PayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CanFrame) PayloadBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CanFrame) MutatePayload(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *CanFrame) FrameType() CanFrameType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return CanFrameType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CanFrame) MutateFrameType(n CanFrameType) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func (rcv *CanFrame) BusId() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CanFrame) MutateBusId(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *CanFrame) NodeId() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CanFrame) MutateNodeId(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *CanFrame) InterfaceId() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CanFrame) MutateInterfaceId(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *CanFrame) Timing(obj *Timing) *Timing {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Timing)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func CanFrameStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func CanFrameAddFrameId(builder *flatbuffers.Builder, frameId uint32) {
	builder.PrependUint32Slot(0, frameId, 0)
}
func CanFrameAddPayload(builder *flatbuffers.Builder, payload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(payload), 0)
}
func CanFrameStartPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func CanFrameAddFrameType(builder *flatbuffers.Builder, frameType CanFrameType) {
	builder.PrependInt8Slot(2, int8(frameType), 0)
}
func CanFrameAddBusId(builder *flatbuffers.Builder, busId byte) {
	builder.PrependByteSlot(3, busId, 0)
}
func CanFrameAddNodeId(builder *flatbuffers.Builder, nodeId byte) {
	builder.PrependByteSlot(4, nodeId, 0)
}
func CanFrameAddInterfaceId(builder *flatbuffers.Builder, interfaceId byte) {
	builder.PrependByteSlot(5, interfaceId, 0)
}
func CanFrameAddTiming(builder *flatbuffers.Builder, timing flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(timing), 0)
}
func CanFrameEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
