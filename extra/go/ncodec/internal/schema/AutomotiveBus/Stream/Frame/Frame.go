// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Frame

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Frame struct {
	_tab flatbuffers.Table
}

func GetRootAsFrame(buf []byte, offset flatbuffers.UOffsetT) *Frame {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Frame{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFrame(buf []byte, offset flatbuffers.UOffsetT) *Frame {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Frame{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Frame) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Frame) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Frame) FType() FrameTypes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return FrameTypes(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Frame) MutateFType(n FrameTypes) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *Frame) F(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func FrameStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func FrameAddFType(builder *flatbuffers.Builder, fType FrameTypes) {
	builder.PrependByteSlot(0, byte(fType), 0)
}
func FrameAddF(builder *flatbuffers.Builder, f flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(f), 0)
}
func FrameEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
